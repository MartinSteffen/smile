/* Generated By:JavaCC: Do not edit this line. ExpressionParser.java */
package csm.expression.parser;
import java.io.StringReader;
import java.util.LinkedList;
import csm.exceptions.ErrSyntaxError;
import csm.expression.*;

public class ExpressionParser implements ExpressionParserConstants {
        static public Expression<Boolean> parseGuard(String gs)
                throws ErrSyntaxError {
                if(gs==null)
                        return new LogicalTrue();
                ExpressionParser p = new ExpressionParser(new StringReader(gs));
                try {
                return p.boolExpr1();
                } catch (ParseException pe) {
                throw new ErrSyntaxError(pe.getMessage());
                }
        }

        static public Action parseAction(String gs)
                throws ErrSyntaxError {
                if(gs==null)
                        return DoSkip.skipAction;
                ExpressionParser p = new ExpressionParser(new StringReader(gs));
                try {
                return p.actionExpr();
                } catch (ParseException pe) {
                throw new ErrSyntaxError(pe.getMessage());
                }
        }

        static public String parseIdent(String gs)
                throws ErrSyntaxError {
                if(gs==null)
                        return null;
                ExpressionParser p = new ExpressionParser(new StringReader(gs));
                try {
                return p.identString();
                } catch (ParseException pe) {
                throw new ErrSyntaxError(pe.getMessage());
                }
        }

// Precedence level 0
  final public Action actionExpr() throws ParseException {
        Token t;
        LinkedList<Expression<Integer>> rv
                = new LinkedList<Expression<Integer>>();
        Expression<Integer> e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SKIP_:
      jj_consume_token(SKIP_);
                  {if (true) return DoSkip.skipAction;}
      break;
    case SEND:
      jj_consume_token(SEND);
      jj_consume_token(LPAREN);
      t = jj_consume_token(IDENT);
      jj_consume_token(COMMA);
      e = intExpr6();
      jj_consume_token(RPAREN);
                  {if (true) return new DoSend(t.image, e);}
      break;
    case IDENT:
      t = jj_consume_token(IDENT);
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RANDOM:
        jj_consume_token(RANDOM);
        jj_consume_token(LPAREN);
        e = intExpr6();
                          rv.add(e);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          jj_consume_token(COMMA);
          e = intExpr6();
                                  rv.add(e);
        }
        jj_consume_token(RPAREN);
                          {if (true) return new DoRandom(t.image, (LinkedList<Expression<Integer>>)rv);}
        break;
      case LPAREN:
      case MINUS:
      case INTNUM:
      case IDENT:
        e = intExpr6();
                          {if (true) return new DoAssign(t.image, e);}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Precedence level 1
  final public Expression<Boolean> boolExpr1() throws ParseException {
        Expression<Boolean> e1;
        Expression<Boolean> e2;
    e1 = boolExpr2();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
      e2 = boolExpr2();
                  e1 = new LogicalOr(e1, e2);
    }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// Precedence level 2
  final public Expression<Boolean> boolExpr2() throws ParseException {
        Expression<Boolean> e1;
        Expression<Boolean> e2;
    e1 = boolExpr3();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(AND);
      e2 = boolExpr3();
                  e1 = new LogicalAnd(e1, e2);
    }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// Precedence level 3
  final public Expression<Boolean> boolExpr3() throws ParseException {
        Expression<Boolean> e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      e = boolExpr3();
                  e = new LogicalNot(e);
      break;
    case LPAREN:
    case MINUS:
    case TRUE:
    case FALSE:
    case INTNUM:
    case IDENT:
      e = boolExpr4();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// Precedence level 4
  final public Expression<Boolean> boolExpr4() throws ParseException {
        Expression<Integer> e1;
        Expression<Integer> e2;
        Expression<Boolean> be;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
                  {if (true) return new LogicalTrue();}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                  {if (true) return new LogicalFalse();}
      break;
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_1(2147483647)) {
        e1 = intExpr6();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
          e2 = intExpr6();
                          {if (true) return new CompareEq(e1, e2);}
          break;
        case NEQ:
          jj_consume_token(NEQ);
          e2 = intExpr6();
                          {if (true) return new CompareNeq(e1, e2);}
          break;
        case LEQ:
          jj_consume_token(LEQ);
          e2 = intExpr6();
                          {if (true) return new CompareLeq(e1, e2);}
          break;
        case GEQ:
          jj_consume_token(GEQ);
          e2 = intExpr6();
                          {if (true) return new CompareGeq(e1, e2);}
          break;
        case LT:
          jj_consume_token(LT);
          e2 = intExpr6();
                          {if (true) return new CompareLt(e1, e2);}
          break;
        case GT:
          jj_consume_token(GT);
          e2 = intExpr6();
                          {if (true) return new CompareGt(e1, e2);}
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          be = boolExpr1();
          jj_consume_token(RPAREN);
                  {if (true) return be;}
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// Precedence level 6
  final public Expression<Integer> intExpr6() throws ParseException {
        Expression<Integer> e1;
        Expression<Integer> e2;
    e1 = intExpr7();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        e2 = intExpr7();
                  e1 = new IntSum(e1, e2);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        e2 = intExpr7();
                  e1 = new IntDifference(e1, e2);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// Precedence level 7
  final public Expression<Integer> intExpr7() throws ParseException {
        Expression<Integer> e1;
        Expression<Integer> e2;
    e1 = intExpr9();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      jj_consume_token(MUL);
      e2 = intExpr9();
                  e1 = new IntProduct(e1, e2);
    }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// Precedence level 9
  final public Expression<Integer> intExpr9() throws ParseException {
        Expression<Integer> e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      e = intExpr9();
                  {if (true) return new IntNegation(e);}
      break;
    case LPAREN:
    case INTNUM:
    case IDENT:
      e = intExpr10();
                  {if (true) return e;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Precedence level 10
  final public Expression<Integer> intExpr10() throws ParseException {
        Token t;
        Expression<Integer> ie;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTNUM:
      t = jj_consume_token(INTNUM);
                  {if (true) return new IntConstant(Integer.valueOf(t.image));}
      break;
    case IDENT:
      t = jj_consume_token(IDENT);
                  {if (true) return new IntVariable(t.image);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      ie = intExpr6();
      jj_consume_token(RPAREN);
                  {if (true) return ie;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String identString() throws ParseException {
        Token t;
    t = jj_consume_token(IDENT);
          {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(INTNUM)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_3R_7()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  public ExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x40,0x30400420,0x20000300,0x1000,0x2000,0x33404020,0x1f8000,0x3000000,0x20,0x600000,0x600000,0x800000,0x30400020,0x30000020,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public ExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ExpressionParser(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[30];
    for (int i = 0; i < 30; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
